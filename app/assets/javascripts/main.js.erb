//= require phaser
var game = new Phaser.Game(300, 500, Phaser.AUTO, 'game', { preload: preload, create: create, update: update });

// LOADING IMAGES TO SCREEN
function preload() {
  game.load.image('coffee', '<%= image_path('firstaid.png') %>');

  game.load.image('background', '<%= image_path('background.png') %>');
  game.load.image('ground', '<%= image_path('barrel.png') %>');
  game.load.image('bottle', '<%= image_path('vodka.png') %>');
  game.load.image('bullet','<%= image_path('bullet.png') %>');
  game.load.image('like','<%= image_path('like.png') %>');
  game.load.image('mug','<%= image_path('beermug.png') %>');
  game.load.spritesheet('bart', '<%= image_path('bart.png') %>',500,500);
  game.load.spritesheet('dude', '<%= image_path('baddie.png') %>', 45, 48.5);
  game.load.spritesheet('guy', '<%= image_path('dude.png') %>', 45, 48);
  game.load.spritesheet('dude', '<%= image_path('baddie.png') %>', 45, 48.5);
  game.load.spritesheet('guy', '<%= image_path('dude.png') %>', 45, 48);

  game.load.tilemap('map', '<%= asset_path('main.json')%>', null, Phaser.Tilemap.TILED_JSON);
>>>>>>> dd2fe0f76447892f3cdb1d7ceb387488bfb3f2cc
  //preloaded music audio
  game.load.audio('bigbs', '<%= asset_path('slatt.mp3') %>');
  game.scale.pageAlignHorizontally = true;
  game.scale.pageAlignVertically = true;
  game.antialias = false;
  game.stage.smoothed = false;
}

var player;
var bottle;
var playertwo;
var platforms;
var cursors;
var bottles;
var score = 0;
var scoreText;
var map;
var tiles;
var fireButton;
var bullets = 0;
var bulletSpeed = 600;
var bart;

var barBullets;
var firingTimer = 0;
var livingEnemies = [];

// ****************** CREATING PLAYER AND MOVEMENTS
function create() {
  game.physics.startSystem(Phaser.Physics.ARCADE);
  game.map = game.add.tilemap('map');
  game.map.addTilesetImage('citytiles','tiles');
  game.map.addTilesetImage('backgd', 'tiles2');
  game.groundLayer = game.map.createLayer('Backgroundlayer');
  game.map.setCollisionBetween(1, 100, true, 'Backgroundlayer');
  game.groundLayer = game.map.createLayer('Groundlayer');
  game.map.setCollisionBetween(1, 100, true, 'Groundlayer');
  game.world.setBounds(0, 0);
  game.world.setBounds(1,1);
  game.add.sprite(0, 0, 'background');



    game.physics.startSystem(Phaser.Physics.ARCADE);

    game.map = game.add.tilemap('map');

    game.map.addTilesetImage('groundlayer','tiles');
    game.map.addTilesetImage('citytiles', 'tiles3');




     platforms = game.add.group();

    game.world.setBounds(0, 0);

    game.physics.startSystem(Phaser.Physics.ARCADE);

    platforms = game.add.group();

    //calls on the music variable created to play the game
    music = game.add.audio('bigbs');
    music.play();

    game.world.setBounds(1,1);



    game.add.sprite(0, 0, 'Tile Layer 1');

  platforms = game.add.group();
  platforms.enableBody = true;

  var ground = platforms.create(0, game.world.height - 0, 'ground');
  ground.scale.setTo(0, 0);


  ground.body.immovable = true;
  var ledge = platforms.create( 'ground');
  ledge.body.immovable = true;

  ledge = platforms.create( 'ground');
    platforms = game.add.group();

    platforms.enableBody = true;

  ledge.body.immovable = true;



  player = game.add.sprite(0, game.world.height - 0, 'dude');
  playertwo = game.add.sprite(0, game.world.height - 0, 'guy');


  game.physics.arcade.enable(player);
  game.physics.arcade.enable(playertwo);
  game.camera.follow(player);
     var ground = platforms.create(0, game.world.height - 0, 'Tile Layer 1');


    ground.scale.setTo(0, 0);

    ground.body.immovable = true;
    var ledge = platforms.create( 'Tile Layer 1');
    ledge.body.immovable = true;

    // ledge = platforms.create( 'Tile Layer 1');

    // ledge.body.immovable = true;


    player = game.add.sprite(0, game.world.height - 0, 'dude');
    playertwo = game.add.sprite(0, game.world.height - 0, 'guy');


    game.physics.arcade.enable(player);
    game.physics.arcade.enable(playertwo);
    game.camera.follow(player);

  player.body.bounce.y = 0.2;
  player.body.gravity.y = 1100;
  player.body.collideWorldBounds = true;

  player.animations.add('left', [3,4, 5], 10, true);
  player.animations.add('right', [ 6,7,8], 10, true);



  playertwo.body.bounce.y = 0.2;
  playertwo.body.gravity.y = 1100;
  playertwo.body.collideWorldBounds = true;

  playertwo.animations.add('left', [3,4, 5], 10, true);
  playertwo.animations.add('right', [ 6,7,8], 10, true);

  // COFFEE ITEMS?

  coffees = game.add.group();

  coffees.enableBody = true;
  for (var i = 0; i < 20; i++)
  {
    var coffee = coffees.create(i * (Math.random()*100), 20, 'coffee');
    coffee.body.gravity.y = 1000;
    coffee.body.bounce.y = 0;
  }
>>>>>>> e9298a013a75f718ad483377a59a97e7bb38de1c

  // BOTTLE ITEMS

  bottles = game.add.group();
  bottles.enableBody = true;
  for (var i = 0; i < 8; i++)
  {
    var bottle = bottles.create( (game.world.width/10)*i+16 , 57, 'bottle');
  }
  for (var i = 0; i < 8; i++)
  {
    var ledge = platforms.create(i * (Math.random()*105), Math.random()*500, 'ground');


    ledge.body.immovable = true;
  }
//  PLATFORMS ITEMS
     for (var i = 0; i < 20; i++)
     {
         var ledge = platforms.create(i * 105, 180, 'GroundLayer');

  var bart = game.add.sprite(50, 98, 'bart');
  game.physics.enable(bart, Phaser.Physics.ARCADE);
  bart.anchor.setTo(0.5, 0.5);
  bart.height = game.world.height*.25;
  bart.width = game.world.width*.3;
  var tween = game.add.tween(bart).to( { x: 230 }, 800, Phaser.Easing.Linear.None, true, 0, 1000, true);

  platforms = game.add.group();
  platforms.enableBody = true;
  player = game.add.sprite(0, game.world.height, 'dude');
  playertwo = game.add.sprite(0, game.world.height, 'guy');
  game.physics.arcade.enable(player);
  game.physics.arcade.enable(playertwo);


  playertwo.body.collideWorldBounds = true;
  playertwo.animations.add('left', [3,4,5], 10, true);
  playertwo.animations.add('right', [6,7,8], 10, true);


  // SCORE TEXT
  scoreString = "Score : ";
  scoreText = game.add.text(10, 10, scoreString + score, {font: '28px Arial', fill: '#fff'});

  cursors = game.input.keyboard.createCursorKeys();

  this.keys = game.input.keyboard.addKeys( { 'up': Phaser.KeyCode.W, 'down': Phaser.KeyCode.S, 'left': Phaser.KeyCode.A, 'right': Phaser.KeyCode.D } );

  // SCORE TEXT


  // this.add.text(100, 0, "run ⇨ jump ⇧ back ⇦ \nDon't Fall ",{
  //   font: "18px monospace",
  //   fill: "#000000",
  //   // padding: { x: 20, y: 10 },
  //   backgroundColor: "#ffffff"
  // })

  fireButton = game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);

}

// *********************************************
// UPDATING MOVEMENT AND GRAVITY WITH SCORE ADDED

function update() {

  var hitPlatform = game.physics.arcade.collide(player, platforms);

  game.physics.arcade.overlap(bullets, bottles, destroyBottle, null, this);
  game.physics.arcade.overlap(bart, bullets, throwMug);

  function destroyBottle(bullet, bottle) {
    bullet.kill();
    bottle.kill();
    score += 10;
    scoreText.setText('Score: ' + score);
  }

  game.physics.arcade.collide(player, game.groundLayer);
    var hitPlatform = game.physics.arcade.collide(player, game.groundLayer);

    game.physics.arcade.overlap(player, bottles, collectDiamond, null, this)
    game.physics.arcade.overlap(player, coffees, collectCoffee, null, this)

    game.physics.arcade.collide(bottles, game.groundLayer);
    game.physics.arcade.collide(coffees, game.groundLayer);

    game.physics.arcade.collide(bottles, layer);
    game.physics.arcade.collide(coffees, layer);


    game.physics.arcade.collide(player, layer);




  player.body.velocity.x = 0;





    if (cursors.left.isDown)
    {
        player.body.velocity.x = -150;

  player.body.velocity.x = 0;
  cursors = game.input.keyboard.createCursorKeys();
  if (cursors.left.isDown)
  {
    player.body.velocity.x = -150;


    player.animations.play('left');
  }
  else if (cursors.right.isDown)
  {
    player.body.velocity.x = 150;
        player.frame = 1;
    }



    player.animations.play('right');
  }
  else
  {
    player.animations.stop();
    player.frame = 1;
  }


  if (cursors.up.isDown && player.body.touching.down && hitPlatform)
  {
    player.body.velocity.y = -350;
  }
    var hitPlatform = game.physics.arcade.collide(playertwo, game.groundLayer);
    game.physics.arcade.overlap(playertwo, bottles, collectDiamond, null, this)



  var hitPlatform = game.physics.arcade.collide(playertwo, platforms);
  game.physics.arcade.overlap(playertwo, bottles, collectDiamond, null, this)

  game.physics.arcade.collide(playertwo, game.groundLayer);

  game.physics.arcade.overlap(playertwo, coffees, collectCoffee, null, this)


  playertwo.body.velocity.x = 0;
  if (this.keys.left.isDown) {
    playertwo.body.velocity.x = -150;
    playertwo.animations.play('left');
  } else if (this.keys.right.isDown) {
    playertwo.body.velocity.x = 150;
    playertwo.animations.play('right');
  } else {
    playertwo.animations.stop();
    playertwo.frame = 1;
  }

  if (this.keys.up.isDown && playertwo.body.touching.down && hitPlatform) {
    playertwo.body.velocity.y = -350;
  };

  if (fireButton.isDown) {
    fireBullet();
  };
}

function fireBullet () {
  if (game.time.now > bulletSpeed)
  {
    bullet = bullets.getFirstExists(false);
    if (bullet)
    {
      bullet.reset(player.x, player.y + 8);
      bullet.body.velocity.y = -400;
      bulletSpeed = game.time.now + 200;
    }
  }
}




// alert('game over!! Your are way too drunk');





function collectCoffee (player, coffee) {
  coffee.kill()
  score -= 1
  game.camera.resetFX();

  energy.value += 5;
  scoreText.text = 'Drinks: ' + score;

  // scoreText.text = 'Drinks: ' + score
}

// ************************************

// POP UP
