//= require phaser
var game = new Phaser.Game(300, 500, Phaser.AUTO, 'game', { preload: preload, create: create, update: update });

// LOADING IMAGES TO SCREEN
function preload() {
  // game.load.image('coffee', '<%= image_path('firstaid.png') %>');
  game.load.image('background', '<%= image_path('PubBar.png') %>');
  game.load.image('bottle', '<%= image_path('vodka.png') %>');
  game.load.image('bullet','<%= image_path('bullet.png') %>');
  game.load.image('like','<%= image_path('like.png') %>');
  game.load.image('mug','<%= image_path('beermug.png') %>');
  game.load.spritesheet('bart', '<%= image_path('bart.png') %>',500,500);
  game.load.spritesheet('dude', '<%= image_path('baddie.png') %>', 45, 48.5);
  game.load.spritesheet('guy', '<%= image_path('dude.png') %>', 45, 48);
  game.load.tilemap('map', '<%= asset_path('main.json')%>', null, Phaser.Tilemap.TILED_JSON);
  game.load.audio('junes', '<%= asset_path('JUNE_EFFECT_IN_GAME') %>');
  game.scale.pageAlignHorizontally = true;
  game.scale.pageAlignVertically = true;
  game.antialias = false;
  game.stage.smoothed = false;
}

var player;
var bottle;
var playertwo;
var platforms;
var cursors;
var bottles;
var score = 0;
var scoreText;
var map;
var tiles;
var fireButton;
var bullets = 0;
var bulletSpeed = 600;
var bart;


var barBullet;
var firingTimer = 0;
var livingEnemies = [];

// ****************** CREATING PLAYER AND MOVEMENTS
function create() {
  game.physics.startSystem(Phaser.Physics.ARCADE);
  // game.world.setBounds(0, 0);
  var bar = game.add.sprite(0, 0, 'background');
  bar.height = game.world.height*.55;
  bar.width = game.world.width;

  bullets = game.add.group();
  bullets.enableBody = true;
  bullets.physicsBodyType = Phaser.Physics.ARCADE;
  bullets.createMultiple(30, 'bullet');
  bullets.setAll('anchor.x', 0.5);
  bullets.setAll('anchor.y', 0.5);
  bullets.setAll('outOfBoundsKill', true);
  bullets.setAll('checkWorldBounds', true);

  enemyBullets = game.add.group();
  enemyBullets.enableBody = true;
  enemyBullets.physicsBodyType = Phaser.Physics.ARCADE;
  enemyBullets.setAll('anchor.x', 0.5);
  enemyBullets.setAll('anchor.y', 0.5);
  enemyBullets.setAll('outOfBoundsKill', true);
  enemyBullets.setAll('checkWorldBounds', true);

  // BOTTLE ITEMS

  bottles = game.add.group();
  bottles.enableBody = true;
  for (var i = 0; i < 8; i++)
  {
    var bottle = bottles.create( (game.world.width/10)*i+16 , 57, 'bottle');
  }
  for (var i = 0; i < 8; i++)
  {
    var bottle = bottles.create( (game.world.width/10)*i+22 , 108, 'bottle');
  }

  bart = game.add.sprite(50, 98, 'bart');
  bart.anchor.setTo(0.5, 0.5);
  bart.height = game.world.height*.25;
  bart.width = game.world.width*.3;
  bart.physicsBodyType = Phaser.Physics.ARCADE;
  bart.enableBody = true;
  var tween = game.add.tween(bart).to( { x: 230 }, 800, Phaser.Easing.Linear.None, true, 0, 1000, true);

  platforms = game.add.group();
  platforms.enableBody = true;
  player = game.add.sprite(0, game.world.height, 'dude');
  playertwo = game.add.sprite(0, game.world.height, 'guy');
  game.physics.arcade.enable(player);
  game.physics.arcade.enable(playertwo);

  game.camera.follow(player);
  player.body.collideWorldBounds = true;
  player.animations.add('left', [3,4,5], 10, true);
  player.animations.add('right', [6,7,8], 10, true);

  playertwo.body.collideWorldBounds = true;
  playertwo.animations.add('left', [3,4,5], 10, true);
  playertwo.animations.add('right', [6,7,8], 10, true);


  // SCORE TEXT
  scoreString = "Score : ";
  scoreText = game.add.text(10, 10, scoreString + score, {font: '28px Arial', fill: '#fff'});

  cursors = game.input.keyboard.createCursorKeys();

  this.keys = game.input.keyboard.addKeys( { 'up': Phaser.KeyCode.W, 'down': Phaser.KeyCode.S, 'left': Phaser.KeyCode.A, 'right': Phaser.KeyCode.D } );

  // SCORE TEXT


  // this.add.text(100, 0, "run ⇨ jump ⇧ back ⇦ \nDon't Fall ",{
  //   font: "18px monospace",
  //   fill: "#000000",
  //   // padding: { x: 20, y: 10 },
  //   backgroundColor: "#ffffff"
  // })

  fireButton = game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);

}

// *********************************************
// UPDATING MOVEMENT AND GRAVITY WITH SCORE ADDED

function update() {
  var hitPlatform = game.physics.arcade.collide(player, platforms);

  game.physics.arcade.collide(bottles, platforms);

  game.physics.arcade.overlap(bullets, bottles, destroyBottle, null, this);
  game.physics.arcade.overlap(bullets, bart, throwMug, null, this);

  function destroyBottle(bullet, bottle) {
    bullet.kill();
    bottle.kill();

    score += 10;
    scoreText.setText('Score: ' + score);
  }

  function throwMug(bart, mug) {
    enemyBullets.push(game.add(bart.position.X, bart.position.Y, 'mug'));
    console.log(enemyBullets);
  }

  // game.physics.arcade.collide(bottles, game.groundLayer);
  //
  // game.physics.arcade.collide(player, game.groundLayer);
  //


  player.body.velocity.x = 0;

  cursors = game.input.keyboard.createCursorKeys();

  if (cursors.left.isDown)
  {
    player.body.velocity.x = -150;

    player.animations.play('left');
  }
  else if (cursors.right.isDown)
  {
    player.body.velocity.x = 150;

    player.animations.play('right');
  }
  else
  {
    player.animations.stop();

    player.frame = 1;
  }

  if (cursors.up.isDown && player.body.touching.down && hitPlatform)
  {
    player.body.velocity.y = -350;
  }

  var hitPlatform = game.physics.arcade.collide(playertwo, platforms);

  game.physics.arcade.collide(playertwo, game.groundLayer);


  playertwo.body.velocity.x = 0;
  if (this.keys.left.isDown)
  {
    playertwo.body.velocity.x = -150;

    playertwo.animations.play('left');
  }
  else if (this.keys.right.isDown)
  {
    playertwo.body.velocity.x = 150;

    playertwo.animations.play('right');
  }
  else
  {
    playertwo.animations.stop();

    playertwo.frame = 1;
  }

  if (this.keys.up.isDown && playertwo.body.touching.down && hitPlatform)
  {
    playertwo.body.velocity.y = -350;
  }





  if (fireButton.isDown)
  {
    fireBullet();
  }

  game.physics.arcade.overlap(bullets, bottle, collisionHandler, null, this);
}

function collisionHandler (bullet, bottle) {
  bullet.kill();
  bottle.kill();
}


function fireBullet () {
  if (game.time.now > bulletSpeed)
  {
    bullet = bullets.getFirstExists(false);
    if (bullet)
    {
      bullet.reset(player.x, player.y + 8);
      bullet.body.velocity.y = -400;
      bulletSpeed = game.time.now + 200;
    }
  }
