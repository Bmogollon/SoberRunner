//= require phaser
var game = new Phaser.Game(300, 500, Phaser.AUTO, 'game', { preload: preload, create: create, update: update });

// LOADING IMAGES TO SCREEN
function preload() {
  // game.load.image('coffee', '<%= image_path('firstaid.png') %>');
  game.load.image('background', '<%= image_path('PubBar.png') %>');
  game.load.image('bottle', '<%= image_path('vodka.png') %>');
  game.load.image('bullet','<%= image_path('bullet.png') %>');
  game.load.image('like','<%= image_path('like.png') %>');
  game.load.image('enemyBullet','<%= image_path('beer.png') %>');
  game.load.spritesheet('bart', '<%= image_path('bart.png') %>',500,500);
  game.load.spritesheet('dude', '<%= image_path('baddie.png') %>', 45, 48.5);
  game.load.spritesheet('guy', '<%= image_path('dude.png') %>', 45, 48);
  game.load.tilemap('map', '<%= asset_path('main.json')%>', null, Phaser.Tilemap.TILED_JSON);
  game.load.audio('junes', '<%= asset_path('JUNE_EFFECT_IN_GAME') %>');
  game.scale.pageAlignHorizontally = true;
  game.scale.pageAlignVertically = true;
  game.antialias = false;
  game.stage.smoothed = false;
}


var bar;
var player;
var bottle;
var playertwo;
var platforms;
var cursors;
var bottles;
var score = 0;
var scoreText;
var like;
var fireButton;
var bullets = 0;
var bulletSpeed = 600;
var bart;


var enemyBullet;

var firingTimer = 40;


// ****************** CREATING PLAYER AND MOVEMENTS
function create() {
  game.physics.startSystem(Phaser.Physics.ARCADE);
  // game.world.setBounds(0, 0);
  var bar = game.add.sprite(0, 0, 'background');
  bar.height = game.world.height*.55;
  bar.width = game.world.width;

  bullets = game.add.group();
  bullets.enableBody = true;
  bullets.physicsBodyType = Phaser.Physics.ARCADE;
  bullets.createMultiple(30, 'bullet');
  bullets.setAll('anchor.x', 0.5);
  bullets.setAll('anchor.y', 0.5);
  bullets.setAll('outOfBoundsKill', true);
  bullets.setAll('checkWorldBounds', true);




  enemyBullets = game.add.group();
  enemyBullets.enableBody = true;
  enemyBullets.physicsBodyType = Phaser.Physics.ARCADE;
  enemyBullets.createMultiple(30, 'enemyBullet');
  enemyBullets.setAll('anchor.x', 0.5);
  enemyBullets.setAll('anchor.y', 0.5);
  enemyBullets.setAll('outOfBoundsKill', true);
  enemyBullets.setAll('checkWorldBounds', true);




  // BOTTLE ITEMS

  bottles = game.add.group();
  bottles.enableBody = true;
  for (var i = 0; i < 8; i++)
  {
    var bottle = bottles.create( (game.world.width/10)*i+16 , 57, 'bottle');
  }
  for (var i = 0; i < 8; i++)
  {
    var bottle = bottles.create( (game.world.width/10)*i+22 , 108, 'bottle');
  }

  bart = game.add.sprite(50, 98, 'bart');
  bart.anchor.setTo(0.5, 0.5);
  bart.height = game.world.height*.25;
  bart.width = game.world.width*.3;
	game.physics.arcade.enable(bart, Phaser.Physics.ARCADE);
  var tween = game.add.tween(bart).to( { x: 230 }, 800, Phaser.Easing.Linear.None, true, 0, 1000, true);

  platforms = game.add.group();
  platforms.enableBody = true;
  player = game.add.sprite(0, game.world.height, 'dude');
  playertwo = game.add.sprite(0, game.world.height, 'guy');
  game.physics.arcade.enable(player);
  game.physics.arcade.enable(playertwo);

  game.camera.follow(player);
  player.body.collideWorldBounds = true;
  player.animations.add('left', [3,4,5], 10, true);
  player.animations.add('right', [6,7,8], 10, true);

  playertwo.body.collideWorldBounds = true;
  playertwo.animations.add('left', [3,4,5], 10, true);
  playertwo.animations.add('right', [6,7,8], 10, true);


  for (var i = 0; i < 3; i++)
  {
    var like  = game.add.image((i*20)-5,3,'like');
    player.addChild(like);
  }

  for (var i = 0; i < 3; i++)
  {

    var like  = game.add.image((i*20)-5,3,'like');
    playertwo.addChild(like);

  }

  // SCORE TEXT

  cursors = game.input.keyboard.createCursorKeys();

  this.keys = game.input.keyboard.addKeys( { 'up': Phaser.KeyCode.W, 'down': Phaser.KeyCode.S, 'left': Phaser.KeyCode.A, 'right': Phaser.KeyCode.D } );

  // SCORE TEXT

  scoreText = game.add.text(400, 0, 'Drinks: 0', { fontSize: '32px', fill: 'white' });


  fireButton = game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);


  fireButton2 = game.input.keyboard.addKey(Phaser.Keyboard.ENTER);


}




// *********************************************
// UPDATING MOVEMENT AND GRAVITY WITH SCORE ADDED

function update() {
  var hitPlatform = game.physics.arcade.collide(player, platforms);

  game.physics.arcade.overlap(bullets, bottles, collisionHandler, null, this);
  game.physics.arcade.overlap(bullets, bart, hitTarget, null, this);
  game.physics.arcade.overlap(enemyBullets, player, hurt, null, this);

  function hitTarget(bart, bullet) {
    bullet.kill();
  }

  function hurt(player, enemyBullet) {
    enemyBullet.kill();
    player.kill();
    player.alive = false;
  }

  player.body.velocity.x = 0;

  cursors = game.input.keyboard.createCursorKeys();

  if (cursors.left.isDown)
  {
    player.body.velocity.x = -150;

    player.animations.play('left');
  }
  else if (cursors.right.isDown)
  {
    player.body.velocity.x = 150;

    player.animations.play('right');
  }
  else
  {
    player.animations.stop();

    player.frame = 1;
  }



  var hitPlatform = game.physics.arcade.collide(playertwo, platforms);

  game.physics.arcade.collide(playertwo, game.groundLayer);


  playertwo.body.velocity.x = 0;
  if (this.keys.left.isDown)
  {
    playertwo.body.velocity.x = -150;

    playertwo.animations.play('left');
  }
  else if (this.keys.right.isDown)
  {
    playertwo.body.velocity.x = 150;

    playertwo.animations.play('right');
  }
  else
  {
    playertwo.animations.stop();

    playertwo.frame = 1;
  }

  if (fireButton.isDown)
  {
    fireBullet();
  }
  if (game.time.now > firingTimer)
  {
    bartFires();
  }

}






function collisionHandler (bullet, bottle) {
  bullet.kill();
  bottle.kill();
}



function bartFires () {

  enemyBullet = enemyBullets.getFirstExists(false);


  if (enemyBullet)
  {
    enemyBullet.reset(bart.x, bart.y+bart.height/2);

    game.physics.arcade.moveToObject(enemyBullet,player,120);
    firingTimer = game.time.now + 500;

  }
}

function fireBullet () {
  if(player.alive) {
    if (game.time.now > bulletSpeed)
    {

      bullet = bullets.getFirstExists(false);

      if (bullet)
      {
        bullet.reset(player.x, player.y + 8);
        bullet.body.velocity.y = -400;
        bulletSpeed = game.time.now + 200;
      }
    }
  }

}
