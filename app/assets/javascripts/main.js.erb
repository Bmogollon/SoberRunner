//= require phaser
var game = new Phaser.Game(1000, 500, Phaser.AUTO, 'game', { preload: preload, create: create, update: update });

// LOADING IMAGES TO SCREEN
function preload() {
  // game.load.image('coffee', '<%= image_path('firstaid.png') %>');
  game.load.image('background', '<%= image_path('PubBar.png') %>');
  // game.load.image('ground', '<%= image_path('barrel.png') %>');
  game.load.image('bottle', '<%= image_path('vodka.png') %>');
  game.load.image('bullet','<%= image_path('bullet.png') %>');

  game.load.spritesheet('dude', '<%= image_path('baddie.png') %>', 45, 48.5);
  game.load.spritesheet('guy', '<%= image_path('dude.png') %>', 45, 48);
  game.scale.pageAlignHorizontally = true;
  game.scale.pageAlignVertically = true;
}

var player;
var bottle;
var playertwo;
var platforms;
var cursors;
var coffees;
var bottles;
var score = 0;
var scoreText;
var fireButton;
var fireButton2;


var bullets = 0;
  var bulletSpeed = 600;

// ****************** CREATING PLAYER AND MOVEMENTS
function create() {
  game.physics.startSystem(Phaser.Physics.ARCADE);
  // game.world.setBounds(0, 0);
  game.add.sprite(0, 0, 'background');



  bullets = game.add.group();
     bullets.enableBody = true;
     bullets.physicsBodyType = Phaser.Physics.ARCADE;
     bullets.createMultiple(30, 'bullet');
     bullets.setAll('anchor.x', 0.5);
     bullets.setAll('anchor.y', 1);
     bullets.setAll('outOfBoundsKill', true);
     bullets.setAll('checkWorldBounds', true);




  platforms = game.add.group();
  platforms.enableBody = true;

  var ground = platforms.create(0, game.world.height - 0, 'ground');
  ground.scale.setTo(0, 0);

  ground.body.immovable = true;
  var ledge = platforms.create( 'ground');
  ledge.body.immovable = true;

  ledge = platforms.create( 'ground');

  ledge.body.immovable = true;


  player = game.add.sprite(0, game.world.height - 0, 'dude');
  playertwo = game.add.sprite(0, game.world.height - 0, 'guy');


  game.physics.arcade.enable(player);
  game.physics.arcade.enable(playertwo);
  game.camera.follow(player);

  player.body.bounce.y = 0.2;
  player.body.gravity.y = 1100;
  player.body.collideWorldBounds = true;

  player.animations.add('left', [3,4, 5], 10, true);
  player.animations.add('right', [ 6,7,8], 10, true);



  playertwo.body.bounce.y = 0.2;
  playertwo.body.gravity.y = 1100;
  playertwo.body.collideWorldBounds = true;

  playertwo.animations.add('left', [3,4, 5], 10, true);
  playertwo.animations.add('right', [ 6,7,8], 10, true);

  // COFFEE ITEMS?

  coffees = game.add.group();

  coffees.enableBody = true;
  for (var i = 0; i < 20; i++)
  {
    var coffee = coffees.create(i * (Math.random()*100), 20, 'coffee');
    coffee.body.gravity.y = 1000;
    coffee.body.bounce.y = 0;
  }

  // BOTTLE ITEMS

  bottles = game.add.group();

  bottles.enableBody = true;
  for (var i = 0; i < 100; i++)
  {
    var bottle = bottles.create(i * 100, -10, 'bottle');

    bottle.body.gravity.y = 900;

    bottle.body.bounce.y = 0.2 + Math.random() * 0.2;
  }

  // PLATFORMS ITEMS
  for (var i = 0; i < 20; i++)
  {
    var ledge = platforms.create(i * (Math.random()*105), Math.random()*500, 'ground');

    ledge.body.immovable = true;
  }



  // SCORE TEXT

  cursors = game.input.keyboard.createCursorKeys();

  this.keys = game.input.keyboard.addKeys( { 'up': Phaser.KeyCode.W, 'down': Phaser.KeyCode.S, 'left': Phaser.KeyCode.A, 'right': Phaser.KeyCode.D } );

  // SCORE TEXT

  scoreText = game.add.text(400, 0, 'Drinks: 0', { fontSize: '32px', fill: 'white' });

  this.add
  .text(100, 0, "run ⇨ jump ⇧ back ⇦ \nDon't Fall ",{
    font: "18px monospace",
    fill: "#000000",
    // padding: { x: 20, y: 10 },
    backgroundColor: "#ffffff"
  })

fireButton = game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);
fireButton2 = game.input.keyboard.addKey(Phaser.Keyboard.ENTER);

}

// *********************************************
// UPDATING MOVEMENT AND GRAVITY WITH SCORE ADDED

function update() {

  game.physics.arcade.overlap(bullets, bottle, collisionHandler, null, this);

  game.physics.arcade.collide(bottles, platforms);
  game.physics.arcade.collide(coffees, platforms);



  player.body.velocity.x = 0;

  cursors = game.input.keyboard.createCursorKeys();

  if (cursors.left.isDown)
  {
    player.body.velocity.x = -150;

    player.animations.play('left');
  }
  else if (cursors.right.isDown)
  {
    player.body.velocity.x = 150;

    player.animations.play('right');
  }
  else
  {
    player.animations.stop();

    player.frame = 1;
  }

  if (cursors.up.isDown && player.body.touching.down && hitPlatform)
  {
    player.body.velocity.y = -350;
  }



// ************
// PlayerTwo Functionality

  playertwo.body.velocity.x = 0;
  if (this.keys.left.isDown)
  {
    playertwo.body.velocity.x = -150;

    playertwo.animations.play('left');
  }
  else if (this.keys.right.isDown)
  {
    playertwo.body.velocity.x = 150;

    playertwo.animations.play('right');
  }
  else
  {
    playertwo.animations.stop();

    playertwo.frame = 1;
  }

  if (this.keys.up.isDown && playertwo.body.touching.down && hitPlatform)
  {
    playertwo.body.velocity.y = -350;
  }



  if (score >= 3) {
    alert('You are drunk! Go Home!!');
    game.camera.shake(0.005, 3000000);
  }

  if (player === fireButton.isDown)
        {
            fireBullet();
        }


        // Player 2 Firing?
        if (fireButton2.isDown)
              {
                  fireBullet();
              }



}






// ******************************
// Health Bar
// _text


// *****************************************
function collectDiamond (player, bottle) {
  bottle.kill()
  score += 1
  bullet.kill();
  bottle.kill();


  // SCORE
  scoreText.text = 'Drinks: ' + score;

}




// alert('game over!! Your are way too drunk');


function collisionHandler (bullet, bottle) {


    bullet.kill();
    bottle.kill();
}


function fireBullet () {

    if (game.time.now > bulletSpeed)
    {

        bullet = bullets.getFirstExists(false);

        if (bullet)
        {
            bullet.reset(player.x, player.y + 8);
            bullet.body.velocity.y = -400;
            bulletSpeed = game.time.now + 200;
        }
    }

}




// ************************************

// POP UP
